name: 测试和部署

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_usercenter
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v2
    
    - name: 设置 Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
    
    - name: 运行测试
      env:
        DJANGO_SETTINGS_MODULE: UserCenter.settings
        DJANGO_ENV: testing
        DB_NAME: test_usercenter
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        REDIS_URL: redis://localhost:6379/0
      run: |
        python manage.py test user.tests
    
    - name: 构建和部署 (仅在主分支)
      if: github.ref == 'refs/heads/main' && success()
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker-compose build
        docker-compose push
        
        # 这里可以添加部署到服务器的命令
        # 例如使用 SSH 连接到服务器并拉取最新镜像 